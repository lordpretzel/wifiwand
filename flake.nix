{
  description = "wifi-wand";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    wifiwand = {
      type = "github";
      owner = "keithrbennett";
      repo = "wifiwand";
      flake = false;     
    };
  };

  outputs = { self, nixpkgs, flake-utils, wifiwand, ... }@inputs:
    flake-utils.lib.eachDefaultSystem
      (system:
        let
          pkgs = import nixpkgs {
            inherit system;
          };

          # jekyll and gem versions
          inc_gems = {
            wifi-wand="2.18.0";
          };

          # Generation of the Gemfile
          generate_gemfile = let
            gems = builtins.concatStringsSep "\n" (pkgs.lib.attrsets.mapAttrsToList (name: version:
              "gem \"${name}\", \"~> ${version}\""
            ) inc_gems);
          in
            ''
              # This file is autogenerated by the flake.nix file, do not edit source "https://rubygems.org"
              source "https://rubygems.org"
              # Gems dependencies to be installed
              ${gems}
          #   '';


          # the bundler app
          env = pkgs.bundlerEnv {
            name = "wifi-wand";
            ruby = pkgs.ruby;
            gemdir = ./.;
            gemset = ./gemset.nix;
          };         
          
          # the bundler app
          # wifiwand-exe = pkgs.bundlerApp {
          #   pname = "wifiwand";
          #   gemdir = ./.;
          #   exes = [ "wifi-wand" ];
          # };
          
          # ruby dependencies
          ruby-dependencies = with pkgs; [ bundler ruby ];

          # Utility to run a script easily in the flakes app
          simple_script = name: add_deps: text: let
            exec = pkgs.writeShellApplication {
              inherit name text;
              runtimeInputs =
                ruby-dependencies ++ add_deps;
            };
          in {
            type = "app";
            program = "${exec}/bin/${name}";
          };

          scriptname = "wifi-wand";
        in with pkgs;
          {
            ###################################################################
            #                             scripts                             #
            ###################################################################
            apps = {

              # default = wifiwand-exe;

              #   To use only if added a dependency, bumped a version, etc ...
              #   After running this add the modified files with "git add" for this to be available on run
              generate-env = simple_script "generate_env" [ pkgs.bundix ] ''
                set -e

                rm -f gemset.nix Gemfile Gemfile.lock .bundle/config
                cat << EOF > Gemfile
                ${generate_gemfile}
                EOF

                ${bundix}/bin/bundix --magic  -d -l
              '';
              
            };
            
            ###################################################################
            #                             packages                            #
            ###################################################################
            packages = {
              wifiwand = 
              pkgs.stdenv.mkDerivation {
                name = "${scriptname}";
                src = ./.;
                nativeBuildInputs = [ makeWrapper ];
                buildInputs = [ env env.wrappedRuby ];
                installPhase = ''
                                mkdir -p $out/bin
                                makeWrapper ${env}/bin/wifi-wand $out/bin/wifi-wand
                '';
              };
            };

            ###################################################################
            #                       development shell                         #
            ###################################################################
            devShells = {

              default =
                mkShell
                {
                  nativeBuildInputs =                    
                    (with pkgs; [
                      bundix
                      ruby
                      rich-cli
                    ]);
                  shellHook = ''                  
                            rich "wifi-wand:" --print --padding 1 -p -a heavy
                  '';
                };

              wifiwand =
                mkShell
                {
                  buildInputs = [ env env.wrappedRuby ];
                  shellHook = ''
                     ${env}/bin/wifi-wand -h
                  '';
                };
            };
          }
      );
}
